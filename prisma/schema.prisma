// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id                    String   @id @default(cuid())
  name                  String
  subdomain             String   @unique
  domain                String?
  isActive              Boolean  @default(true)
  maxUsers              Int      @default(10)
  maxPatients           Int      @default(1000)
  maxOffers             Int      @default(5000)
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  subscriptionStatus    String   @default("TRIAL")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  users                 ClinicUser[]
  patients              Patient[]
  offers                Offer[]
  patientOffers         PatientOffer[]
  reminders             Reminder[]
  notes                 Note[]
  settings              ClinicSetting[]
  tickets               SupportTicket[]
  offerStatuses         OfferStatus[]
  referralSources       ReferralSource[]
  supportCategories     SupportCategory[]
  supportPriorities     SupportPriority[]
  supportStatuses       SupportStatus[]
  pdfTemplates          PDFTemplate[]

  @@map("clinics")
}

model ClinicUser {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  role        String   @default("USER")
  password    String
  isActive    Boolean  @default(true)
  permissions String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])

  patients    Patient[]
  offers      Offer[]
  reminders   Reminder[]
  notes       Note[]
  messages    SupportMessage[]
  createdTickets SupportTicket[] @relation("TicketCreatedBy")
  assignedTickets SupportTicket[] @relation("TicketAssignedTo")

  @@map("clinic_users")
}

model ClinicSetting {
  id        String   @id @default(cuid())
  key       String
  value     String
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clinicId  String
  clinic    Clinic   @relation(fields: [clinicId], references: [id])

  @@unique([clinicId, key])
  @@map("clinic_settings")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   @default("SUPER_ADMIN")
  password  String?  // Optional for development
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Patient {
  id                String   @id @default(cuid())
  name              String
  email             String?
  phone             String?
  birthDate         DateTime?
  gender            String?
  address           String?
  city              String?
  country           String   @default("TR")
  nationality       String   @default("TR")
  phoneCountry      String   @default("+90")
  notes             String?
  isActive          Boolean  @default(true)
  isDeleted         Boolean  @default(false)
  referralSourceId  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  medicalHistory    String?
  allergies         String?
  medications       String?
  emergencyContact  String?

  clinicId          String
  clinic            Clinic   @relation(fields: [clinicId], references: [id])
  
  createdById       String?
  createdBy         ClinicUser? @relation(fields: [createdById], references: [id])

  offers            PatientOffer[]
  reminders         Reminder[]

  referralSource    ReferralSource? @relation(fields: [referralSourceId], references: [id])

  @@map("patients")
}

model OfferStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  color       String   @default("#6B7280")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])

  offers      Offer[]

  @@map("offer_statuses")
}

model Offer {
  id                String   @id @default(cuid())
  title             String
  description       String?
  totalPrice        Float
  currency          String   @default("TRY")
  validUntil        DateTime?
  isDeleted         Boolean  @default(false)
  slug              String   @unique
  pdfTemplateId     String?
  estimatedDuration Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  clinicId          String
  clinic            Clinic   @relation(fields: [clinicId], references: [id])
  
  createdById       String?
  createdBy         ClinicUser? @relation(fields: [createdById], references: [id])

  statusId          String?
  status            OfferStatus? @relation(fields: [statusId], references: [id])

  pdfTemplate       PDFTemplate? @relation(fields: [pdfTemplateId], references: [id])

  treatments        Treatment[]
  patientOffers     PatientOffer[]
  reminders         Reminder[]
  notes             Note[]

  @@map("offers")
}

model PatientOffer {
  id        String   @id @default(cuid())
  patientId String
  offerId   String
  clinicId  String
  assigned  Boolean  @default(false)
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient   Patient  @relation(fields: [patientId], references: [id])
  offer     Offer    @relation(fields: [offerId], references: [id])
  clinic    Clinic   @relation(fields: [clinicId], references: [id])

  @@unique([patientId, offerId])
  @@map("patient_offers")
}

model Treatment {
  id                String   @id @default(cuid())
  name              String
  description       String?
  price             Float
  quantity          Int      @default(1)
  currency          String   @default("TRY")
  category          String   @default("general")
  key               String?
  selectedTeeth     String?
  estimatedDuration Int?
  order             Int      @default(0)
  isDeleted         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  offerId           String
  offer             Offer    @relation(fields: [offerId], references: [id])

  @@map("treatments")
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])
  
  userId      String
  user        ClinicUser @relation(fields: [userId], references: [id])

  offerId     String?
  offer       Offer? @relation(fields: [offerId], references: [id])

  @@map("notes")
}

model Reminder {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])
  
  patientId   String?
  patient     Patient? @relation(fields: [patientId], references: [id])
  
  offerId     String?
  offer       Offer? @relation(fields: [offerId], references: [id])
  
  userId      String
  user        ClinicUser @relation(fields: [userId], references: [id])

  @@map("reminders")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model ReferralSource {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String   @default("#6B7280")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])

  patients    Patient[]

  @@map("referral_sources")
}

model SupportCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String   @default("#6B7280")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])

  tickets     SupportTicket[]

  @@map("support_categories")
}

model SupportTicket {
  id            String   @id @default(cuid())
  ticketNumber  String   @unique
  subject       String
  description   String
  isUrgent      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  clinicId      String
  clinic        Clinic   @relation(fields: [clinicId], references: [id])
  
  categoryId    String?
  category      SupportCategory? @relation(fields: [categoryId], references: [id])
  
  priorityId    String?
  priority      SupportPriority? @relation(fields: [priorityId], references: [id])
  
  statusId      String?
  status        SupportStatus? @relation(fields: [statusId], references: [id])
  
  createdById   String
  createdBy     ClinicUser @relation("TicketCreatedBy", fields: [createdById], references: [id])
  
  assignedToId  String?
  assignedTo    ClinicUser? @relation("TicketAssignedTo", fields: [assignedToId], references: [id])

  messages      SupportMessage[]
  attachments   SupportAttachment[]

  @@map("support_tickets")
}

model SupportMessage {
  id        String   @id @default(cuid())
  content   String
  isInternal Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  
  authorId  String
  author    ClinicUser @relation(fields: [authorId], references: [id])

  @@map("support_messages")
}

model SupportPriority {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  level       Int      @default(1)
  color       String   @default("#6B7280")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])

  tickets     SupportTicket[]

  @@map("support_priorities")
}

model SupportStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  color       String   @default("#6B7280")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])

  tickets     SupportTicket[]

  @@map("support_statuses")
}

model SupportAttachment {
  id        String   @id @default(cuid())
  filename  String
  filepath  String
  filesize  Int
  mimetype  String
  createdAt DateTime @default(now())

  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])

  @@map("support_attachments")
}

model PDFTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])

  offers      Offer[]

  @@map("pdf_templates")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rate_limits")
} 