generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id                    String            @id @default(cuid())
  name                  String
  subdomain             String            @unique
  domain                String?
  isActive              Boolean           @default(true)
  maxUsers              Int               @default(10)
  maxPatients           Int               @default(1000)
  maxOffers             Int               @default(5000)
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  subscriptionStatus    String            @default("TRIAL")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  settings              ClinicSetting[]
  users                 ClinicUser[]
  notes                 Note[]
  offerStatuses         OfferStatus[]
  offers                Offer[]
  patientOffers         PatientOffer[]
  patients              Patient[]
  pdfTemplates          PDFTemplate[]
  referralSources       ReferralSource[]
  reminders             Reminder[]
  supportCategories     SupportCategory[]
  supportPriorities     SupportPriority[]
  supportStatuses       SupportStatus[]
  tickets               SupportTicket[]

  @@map("clinics")
}

model ClinicUser {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String
  role            String           @default("USER")
  password        String
  isActive        Boolean          @default(true)
  permissions     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  clinicId        String
  clinic          Clinic           @relation(fields: [clinicId], references: [id])
  notes           Note[]
  offers          Offer[]
  patients        Patient[]
  reminders       Reminder[]
  messages        SupportMessage[]
  assignedTickets SupportTicket[]  @relation("TicketAssignedTo")
  createdTickets  SupportTicket[]  @relation("TicketCreatedBy")

  @@map("clinic_users")
}

model ClinicSetting {
  id        String   @id @default(cuid())
  key       String
  value     String
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinicId  String
  clinic    Clinic   @relation(fields: [clinicId], references: [id])

  @@unique([clinicId, key])
  @@map("clinic_settings")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   @default("SUPER_ADMIN")
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Patient {
  id               String          @id @default(cuid())
  name             String
  email            String?
  phone            String?
  birthDate        DateTime?
  gender           String?
  address          String?
  city             String?
  country          String          @default("TR")
  nationality      String          @default("TR")
  phoneCountry     String          @default("+90")
  notes            String?
  isActive         Boolean         @default(true)
  isDeleted        Boolean         @default(false)
  referralSourceId String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  medicalHistory   String?
  allergies        String?
  medications      String?
  emergencyContact String?
  clinicId         String
  createdById      String?
  offers           PatientOffer[]
  clinic           Clinic          @relation(fields: [clinicId], references: [id])
  createdBy        ClinicUser?     @relation(fields: [createdById], references: [id])
  referralSource   ReferralSource? @relation(fields: [referralSourceId], references: [id])
  reminders        Reminder[]

  @@map("patients")
}

model OfferStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  color       String   @default("#6B7280")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])
  offers      Offer[]

  @@map("offer_statuses")
}

model Offer {
  id                String         @id @default(cuid())
  title             String
  description       String?
  totalPrice        Float
  currency          String         @default("TRY")
  validUntil        DateTime?
  isDeleted         Boolean        @default(false)
  slug              String         @unique
  pdfTemplateId     String?
  estimatedDuration Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  clinicId          String
  createdById       String?
  statusId          String?
  notes             Note[]
  clinic            Clinic         @relation(fields: [clinicId], references: [id])
  createdBy         ClinicUser?    @relation(fields: [createdById], references: [id])
  pdfTemplate       PDFTemplate?   @relation(fields: [pdfTemplateId], references: [id])
  status            OfferStatus?   @relation(fields: [statusId], references: [id])
  patientOffers     PatientOffer[]
  reminders         Reminder[]
  treatments        Treatment[]

  @@map("offers")
}

model PatientOffer {
  id        String   @id @default(cuid())
  patientId String
  offerId   String
  clinicId  String
  assigned  Boolean  @default(false)
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  offer     Offer    @relation(fields: [offerId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])

  @@unique([patientId, offerId])
  @@map("patient_offers")
}

model Treatment {
  id                String   @id @default(cuid())
  name              String
  description       String?
  price             Float
  quantity          Int      @default(1)
  currency          String   @default("TRY")
  category          String   @default("general")
  key               String?
  selectedTeeth     String?
  estimatedDuration Int?
  order             Int      @default(0)
  isDeleted         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  offerId           String
  offer             Offer    @relation(fields: [offerId], references: [id])

  @@map("treatments")
}

model Note {
  id        String     @id @default(cuid())
  title     String
  content   String
  isPrivate Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  clinicId  String
  userId    String
  offerId   String?
  clinic    Clinic     @relation(fields: [clinicId], references: [id])
  offer     Offer?     @relation(fields: [offerId], references: [id])
  user      ClinicUser @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Reminder {
  id          String     @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  isCompleted Boolean    @default(false)
  isPinned    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  clinicId    String
  patientId   String?
  offerId     String?
  userId      String
  clinic      Clinic     @relation(fields: [clinicId], references: [id])
  offer       Offer?     @relation(fields: [offerId], references: [id])
  patient     Patient?   @relation(fields: [patientId], references: [id])
  user        ClinicUser @relation(fields: [userId], references: [id])

  @@map("reminders")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model ReferralSource {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String
  description String?
  color       String    @default("#6B7280")
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clinicId    String
  patients    Patient[]
  clinic      Clinic    @relation(fields: [clinicId], references: [id])

  @@map("referral_sources")
}

model SupportCategory {
  id          String          @id @default(cuid())
  name        String          @unique
  displayName String
  description String?
  color       String          @default("#6B7280")
  order       Int             @default(0)
  isActive    Boolean         @default(true)
  isDeleted   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  clinicId    String
  clinic      Clinic          @relation(fields: [clinicId], references: [id])
  tickets     SupportTicket[]

  @@map("support_categories")
}

model SupportTicket {
  id           String              @id @default(cuid())
  ticketNumber String              @unique
  subject      String
  description  String
  isUrgent     Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  clinicId     String
  categoryId   String?
  priorityId   String?
  statusId     String?
  createdById  String
  assignedToId String?
  attachments  SupportAttachment[]
  messages     SupportMessage[]
  assignedTo   ClinicUser?         @relation("TicketAssignedTo", fields: [assignedToId], references: [id])
  category     SupportCategory?    @relation(fields: [categoryId], references: [id])
  clinic       Clinic              @relation(fields: [clinicId], references: [id])
  createdBy    ClinicUser          @relation("TicketCreatedBy", fields: [createdById], references: [id])
  priority     SupportPriority?    @relation(fields: [priorityId], references: [id])
  status       SupportStatus?      @relation(fields: [statusId], references: [id])

  @@map("support_tickets")
}

model SupportMessage {
  id         String        @id @default(cuid())
  content    String
  isInternal Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  ticketId   String
  authorId   String
  author     ClinicUser    @relation(fields: [authorId], references: [id])
  ticket     SupportTicket @relation(fields: [ticketId], references: [id])

  @@map("support_messages")
}

model SupportPriority {
  id          String          @id @default(cuid())
  name        String          @unique
  displayName String
  level       Int             @default(1)
  color       String          @default("#6B7280")
  order       Int             @default(0)
  isActive    Boolean         @default(true)
  isDeleted   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  clinicId    String
  clinic      Clinic          @relation(fields: [clinicId], references: [id])
  tickets     SupportTicket[]

  @@map("support_priorities")
}

model SupportStatus {
  id          String          @id @default(cuid())
  name        String          @unique
  displayName String
  color       String          @default("#6B7280")
  order       Int             @default(0)
  isActive    Boolean         @default(true)
  isDeleted   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  clinicId    String
  clinic      Clinic          @relation(fields: [clinicId], references: [id])
  tickets     SupportTicket[]

  @@map("support_statuses")
}

model SupportAttachment {
  id        String        @id @default(cuid())
  filename  String
  filepath  String
  filesize  Int
  mimetype  String
  createdAt DateTime      @default(now())
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])

  @@map("support_attachments")
}

model PDFTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clinicId    String
  offers      Offer[]
  clinic      Clinic   @relation(fields: [clinicId], references: [id])

  @@map("pdf_templates")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rate_limits")
}
